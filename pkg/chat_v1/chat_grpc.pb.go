// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: chat.proto

package chatv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatAPIClient is the client API for ChatAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatAPIClient interface {
	CreateChat(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error)
	AddMemberToChat(ctx context.Context, in *AddMemberToChatRequest, opts ...grpc.CallOption) (*AddMemberToChatResponse, error)
	ConnectChat(ctx context.Context, in *ConnectChatRequest, opts ...grpc.CallOption) (ChatAPI_ConnectChatClient, error)
}

type chatAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChatAPIClient(cc grpc.ClientConnInterface) ChatAPIClient {
	return &chatAPIClient{cc}
}

func (c *chatAPIClient) CreateChat(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/api.chat_v1.ChatAPI/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.chat_v1.ChatAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/api.chat_v1.ChatAPI/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error) {
	out := new(GetChatResponse)
	err := c.cc.Invoke(ctx, "/api.chat_v1.ChatAPI/GetChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) AddMemberToChat(ctx context.Context, in *AddMemberToChatRequest, opts ...grpc.CallOption) (*AddMemberToChatResponse, error) {
	out := new(AddMemberToChatResponse)
	err := c.cc.Invoke(ctx, "/api.chat_v1.ChatAPI/AddMemberToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatAPIClient) ConnectChat(ctx context.Context, in *ConnectChatRequest, opts ...grpc.CallOption) (ChatAPI_ConnectChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatAPI_ServiceDesc.Streams[0], "/api.chat_v1.ChatAPI/ConnectChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatAPIConnectChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatAPI_ConnectChatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatAPIConnectChatClient struct {
	grpc.ClientStream
}

func (x *chatAPIConnectChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatAPIServer is the server API for ChatAPI service.
// All implementations must embed UnimplementedChatAPIServer
// for forward compatibility
type ChatAPIServer interface {
	CreateChat(context.Context, *CreateRequest) (*CreateResponse, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error)
	AddMemberToChat(context.Context, *AddMemberToChatRequest) (*AddMemberToChatResponse, error)
	ConnectChat(*ConnectChatRequest, ChatAPI_ConnectChatServer) error
	mustEmbedUnimplementedChatAPIServer()
}

// UnimplementedChatAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChatAPIServer struct {
}

func (UnimplementedChatAPIServer) CreateChat(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedChatAPIServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChatAPIServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatAPIServer) GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedChatAPIServer) AddMemberToChat(context.Context, *AddMemberToChatRequest) (*AddMemberToChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMemberToChat not implemented")
}
func (UnimplementedChatAPIServer) ConnectChat(*ConnectChatRequest, ChatAPI_ConnectChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectChat not implemented")
}
func (UnimplementedChatAPIServer) mustEmbedUnimplementedChatAPIServer() {}

// UnsafeChatAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatAPIServer will
// result in compilation errors.
type UnsafeChatAPIServer interface {
	mustEmbedUnimplementedChatAPIServer()
}

func RegisterChatAPIServer(s grpc.ServiceRegistrar, srv ChatAPIServer) {
	s.RegisterService(&ChatAPI_ServiceDesc, srv)
}

func _ChatAPI_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chat_v1.ChatAPI/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).CreateChat(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chat_v1.ChatAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chat_v1.ChatAPI/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chat_v1.ChatAPI/GetChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).GetChat(ctx, req.(*GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_AddMemberToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatAPIServer).AddMemberToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.chat_v1.ChatAPI/AddMemberToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatAPIServer).AddMemberToChat(ctx, req.(*AddMemberToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatAPI_ConnectChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatAPIServer).ConnectChat(m, &chatAPIConnectChatServer{stream})
}

type ChatAPI_ConnectChatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatAPIConnectChatServer struct {
	grpc.ServerStream
}

func (x *chatAPIConnectChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// ChatAPI_ServiceDesc is the grpc.ServiceDesc for ChatAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.chat_v1.ChatAPI",
	HandlerType: (*ChatAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChat",
			Handler:    _ChatAPI_CreateChat_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChatAPI_Delete_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatAPI_SendMessage_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _ChatAPI_GetChat_Handler,
		},
		{
			MethodName: "AddMemberToChat",
			Handler:    _ChatAPI_AddMemberToChat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectChat",
			Handler:       _ChatAPI_ConnectChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}
