// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/en7ka/chat-server/internal/repository/repointerface.ChatRepository -o chat_repository_minimock.go -n ChatRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/en7ka/chat-server/internal/models"
	"github.com/gojuno/minimock/v3"
)

// ChatRepositoryMock implements mm_repointerface.ChatRepository
type ChatRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcAddMemberToChat          func(ctx context.Context, member *models.ChatMember) (i1 int64, err error)
	funcAddMemberToChatOrigin    string
	inspectFuncAddMemberToChat   func(ctx context.Context, member *models.ChatMember)
	afterAddMemberToChatCounter  uint64
	beforeAddMemberToChatCounter uint64
	AddMemberToChatMock          mChatRepositoryMockAddMemberToChat

	funcCreateChat          func(ctx context.Context, chat *models.Chat) (i1 int64, err error)
	funcCreateChatOrigin    string
	inspectFuncCreateChat   func(ctx context.Context, chat *models.Chat)
	afterCreateChatCounter  uint64
	beforeCreateChatCounter uint64
	CreateChatMock          mChatRepositoryMockCreateChat

	funcGetChatById          func(ctx context.Context, chatId int64) (cp1 *models.Chat, err error)
	funcGetChatByIdOrigin    string
	inspectFuncGetChatById   func(ctx context.Context, chatId int64)
	afterGetChatByIdCounter  uint64
	beforeGetChatByIdCounter uint64
	GetChatByIdMock          mChatRepositoryMockGetChatById

	funcGetChatMessages          func(ctx context.Context, chatId int64) (mpa1 []*models.Message, err error)
	funcGetChatMessagesOrigin    string
	inspectFuncGetChatMessages   func(ctx context.Context, chatId int64)
	afterGetChatMessagesCounter  uint64
	beforeGetChatMessagesCounter uint64
	GetChatMessagesMock          mChatRepositoryMockGetChatMessages

	funcSendMessage          func(ctx context.Context, message *models.Message) (i1 int64, err error)
	funcSendMessageOrigin    string
	inspectFuncSendMessage   func(ctx context.Context, message *models.Message)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mChatRepositoryMockSendMessage
}

// NewChatRepositoryMock returns a mock for mm_repointerface.ChatRepository
func NewChatRepositoryMock(t minimock.Tester) *ChatRepositoryMock {
	m := &ChatRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddMemberToChatMock = mChatRepositoryMockAddMemberToChat{mock: m}
	m.AddMemberToChatMock.callArgs = []*ChatRepositoryMockAddMemberToChatParams{}

	m.CreateChatMock = mChatRepositoryMockCreateChat{mock: m}
	m.CreateChatMock.callArgs = []*ChatRepositoryMockCreateChatParams{}

	m.GetChatByIdMock = mChatRepositoryMockGetChatById{mock: m}
	m.GetChatByIdMock.callArgs = []*ChatRepositoryMockGetChatByIdParams{}

	m.GetChatMessagesMock = mChatRepositoryMockGetChatMessages{mock: m}
	m.GetChatMessagesMock.callArgs = []*ChatRepositoryMockGetChatMessagesParams{}

	m.SendMessageMock = mChatRepositoryMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*ChatRepositoryMockSendMessageParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mChatRepositoryMockAddMemberToChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockAddMemberToChatExpectation
	expectations       []*ChatRepositoryMockAddMemberToChatExpectation

	callArgs []*ChatRepositoryMockAddMemberToChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockAddMemberToChatExpectation specifies expectation struct of the ChatRepository.AddMemberToChat
type ChatRepositoryMockAddMemberToChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockAddMemberToChatParams
	paramPtrs          *ChatRepositoryMockAddMemberToChatParamPtrs
	expectationOrigins ChatRepositoryMockAddMemberToChatExpectationOrigins
	results            *ChatRepositoryMockAddMemberToChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockAddMemberToChatParams contains parameters of the ChatRepository.AddMemberToChat
type ChatRepositoryMockAddMemberToChatParams struct {
	ctx    context.Context
	member *models.ChatMember
}

// ChatRepositoryMockAddMemberToChatParamPtrs contains pointers to parameters of the ChatRepository.AddMemberToChat
type ChatRepositoryMockAddMemberToChatParamPtrs struct {
	ctx    *context.Context
	member **models.ChatMember
}

// ChatRepositoryMockAddMemberToChatResults contains results of the ChatRepository.AddMemberToChat
type ChatRepositoryMockAddMemberToChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockAddMemberToChatOrigins contains origins of expectations of the ChatRepository.AddMemberToChat
type ChatRepositoryMockAddMemberToChatExpectationOrigins struct {
	origin       string
	originCtx    string
	originMember string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Optional() *mChatRepositoryMockAddMemberToChat {
	mmAddMemberToChat.optional = true
	return mmAddMemberToChat
}

// Expect sets up expected params for ChatRepository.AddMemberToChat
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Expect(ctx context.Context, member *models.ChatMember) *mChatRepositoryMockAddMemberToChat {
	if mmAddMemberToChat.mock.funcAddMemberToChat != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Set")
	}

	if mmAddMemberToChat.defaultExpectation == nil {
		mmAddMemberToChat.defaultExpectation = &ChatRepositoryMockAddMemberToChatExpectation{}
	}

	if mmAddMemberToChat.defaultExpectation.paramPtrs != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by ExpectParams functions")
	}

	mmAddMemberToChat.defaultExpectation.params = &ChatRepositoryMockAddMemberToChatParams{ctx, member}
	mmAddMemberToChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmAddMemberToChat.expectations {
		if minimock.Equal(e.params, mmAddMemberToChat.defaultExpectation.params) {
			mmAddMemberToChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAddMemberToChat.defaultExpectation.params)
		}
	}

	return mmAddMemberToChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.AddMemberToChat
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockAddMemberToChat {
	if mmAddMemberToChat.mock.funcAddMemberToChat != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Set")
	}

	if mmAddMemberToChat.defaultExpectation == nil {
		mmAddMemberToChat.defaultExpectation = &ChatRepositoryMockAddMemberToChatExpectation{}
	}

	if mmAddMemberToChat.defaultExpectation.params != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Expect")
	}

	if mmAddMemberToChat.defaultExpectation.paramPtrs == nil {
		mmAddMemberToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddMemberToChatParamPtrs{}
	}
	mmAddMemberToChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmAddMemberToChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmAddMemberToChat
}

// ExpectMemberParam2 sets up expected param member for ChatRepository.AddMemberToChat
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) ExpectMemberParam2(member *models.ChatMember) *mChatRepositoryMockAddMemberToChat {
	if mmAddMemberToChat.mock.funcAddMemberToChat != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Set")
	}

	if mmAddMemberToChat.defaultExpectation == nil {
		mmAddMemberToChat.defaultExpectation = &ChatRepositoryMockAddMemberToChatExpectation{}
	}

	if mmAddMemberToChat.defaultExpectation.params != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Expect")
	}

	if mmAddMemberToChat.defaultExpectation.paramPtrs == nil {
		mmAddMemberToChat.defaultExpectation.paramPtrs = &ChatRepositoryMockAddMemberToChatParamPtrs{}
	}
	mmAddMemberToChat.defaultExpectation.paramPtrs.member = &member
	mmAddMemberToChat.defaultExpectation.expectationOrigins.originMember = minimock.CallerInfo(1)

	return mmAddMemberToChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.AddMemberToChat
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Inspect(f func(ctx context.Context, member *models.ChatMember)) *mChatRepositoryMockAddMemberToChat {
	if mmAddMemberToChat.mock.inspectFuncAddMemberToChat != nil {
		mmAddMemberToChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.AddMemberToChat")
	}

	mmAddMemberToChat.mock.inspectFuncAddMemberToChat = f

	return mmAddMemberToChat
}

// Return sets up results that will be returned by ChatRepository.AddMemberToChat
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmAddMemberToChat.mock.funcAddMemberToChat != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Set")
	}

	if mmAddMemberToChat.defaultExpectation == nil {
		mmAddMemberToChat.defaultExpectation = &ChatRepositoryMockAddMemberToChatExpectation{mock: mmAddMemberToChat.mock}
	}
	mmAddMemberToChat.defaultExpectation.results = &ChatRepositoryMockAddMemberToChatResults{i1, err}
	mmAddMemberToChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmAddMemberToChat.mock
}

// Set uses given function f to mock the ChatRepository.AddMemberToChat method
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Set(f func(ctx context.Context, member *models.ChatMember) (i1 int64, err error)) *ChatRepositoryMock {
	if mmAddMemberToChat.defaultExpectation != nil {
		mmAddMemberToChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.AddMemberToChat method")
	}

	if len(mmAddMemberToChat.expectations) > 0 {
		mmAddMemberToChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.AddMemberToChat method")
	}

	mmAddMemberToChat.mock.funcAddMemberToChat = f
	mmAddMemberToChat.mock.funcAddMemberToChatOrigin = minimock.CallerInfo(1)
	return mmAddMemberToChat.mock
}

// When sets expectation for the ChatRepository.AddMemberToChat which will trigger the result defined by the following
// Then helper
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) When(ctx context.Context, member *models.ChatMember) *ChatRepositoryMockAddMemberToChatExpectation {
	if mmAddMemberToChat.mock.funcAddMemberToChat != nil {
		mmAddMemberToChat.mock.t.Fatalf("ChatRepositoryMock.AddMemberToChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockAddMemberToChatExpectation{
		mock:               mmAddMemberToChat.mock,
		params:             &ChatRepositoryMockAddMemberToChatParams{ctx, member},
		expectationOrigins: ChatRepositoryMockAddMemberToChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmAddMemberToChat.expectations = append(mmAddMemberToChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.AddMemberToChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockAddMemberToChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockAddMemberToChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.AddMemberToChat should be invoked
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Times(n uint64) *mChatRepositoryMockAddMemberToChat {
	if n == 0 {
		mmAddMemberToChat.mock.t.Fatalf("Times of ChatRepositoryMock.AddMemberToChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmAddMemberToChat.expectedInvocations, n)
	mmAddMemberToChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmAddMemberToChat
}

func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) invocationsDone() bool {
	if len(mmAddMemberToChat.expectations) == 0 && mmAddMemberToChat.defaultExpectation == nil && mmAddMemberToChat.mock.funcAddMemberToChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmAddMemberToChat.mock.afterAddMemberToChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmAddMemberToChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// AddMemberToChat implements mm_repointerface.ChatRepository
func (mmAddMemberToChat *ChatRepositoryMock) AddMemberToChat(ctx context.Context, member *models.ChatMember) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmAddMemberToChat.beforeAddMemberToChatCounter, 1)
	defer mm_atomic.AddUint64(&mmAddMemberToChat.afterAddMemberToChatCounter, 1)

	mmAddMemberToChat.t.Helper()

	if mmAddMemberToChat.inspectFuncAddMemberToChat != nil {
		mmAddMemberToChat.inspectFuncAddMemberToChat(ctx, member)
	}

	mm_params := ChatRepositoryMockAddMemberToChatParams{ctx, member}

	// Record call args
	mmAddMemberToChat.AddMemberToChatMock.mutex.Lock()
	mmAddMemberToChat.AddMemberToChatMock.callArgs = append(mmAddMemberToChat.AddMemberToChatMock.callArgs, &mm_params)
	mmAddMemberToChat.AddMemberToChatMock.mutex.Unlock()

	for _, e := range mmAddMemberToChat.AddMemberToChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmAddMemberToChat.AddMemberToChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.Counter, 1)
		mm_want := mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.params
		mm_want_ptrs := mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockAddMemberToChatParams{ctx, member}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmAddMemberToChat.t.Errorf("ChatRepositoryMock.AddMemberToChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.member != nil && !minimock.Equal(*mm_want_ptrs.member, mm_got.member) {
				mmAddMemberToChat.t.Errorf("ChatRepositoryMock.AddMemberToChat got unexpected parameter member, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.expectationOrigins.originMember, *mm_want_ptrs.member, mm_got.member, minimock.Diff(*mm_want_ptrs.member, mm_got.member))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAddMemberToChat.t.Errorf("ChatRepositoryMock.AddMemberToChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmAddMemberToChat.AddMemberToChatMock.defaultExpectation.results
		if mm_results == nil {
			mmAddMemberToChat.t.Fatal("No results are set for the ChatRepositoryMock.AddMemberToChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmAddMemberToChat.funcAddMemberToChat != nil {
		return mmAddMemberToChat.funcAddMemberToChat(ctx, member)
	}
	mmAddMemberToChat.t.Fatalf("Unexpected call to ChatRepositoryMock.AddMemberToChat. %v %v", ctx, member)
	return
}

// AddMemberToChatAfterCounter returns a count of finished ChatRepositoryMock.AddMemberToChat invocations
func (mmAddMemberToChat *ChatRepositoryMock) AddMemberToChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddMemberToChat.afterAddMemberToChatCounter)
}

// AddMemberToChatBeforeCounter returns a count of ChatRepositoryMock.AddMemberToChat invocations
func (mmAddMemberToChat *ChatRepositoryMock) AddMemberToChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAddMemberToChat.beforeAddMemberToChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.AddMemberToChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAddMemberToChat *mChatRepositoryMockAddMemberToChat) Calls() []*ChatRepositoryMockAddMemberToChatParams {
	mmAddMemberToChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockAddMemberToChatParams, len(mmAddMemberToChat.callArgs))
	copy(argCopy, mmAddMemberToChat.callArgs)

	mmAddMemberToChat.mutex.RUnlock()

	return argCopy
}

// MinimockAddMemberToChatDone returns true if the count of the AddMemberToChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockAddMemberToChatDone() bool {
	if m.AddMemberToChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.AddMemberToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.AddMemberToChatMock.invocationsDone()
}

// MinimockAddMemberToChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockAddMemberToChatInspect() {
	for _, e := range m.AddMemberToChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddMemberToChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterAddMemberToChatCounter := mm_atomic.LoadUint64(&m.afterAddMemberToChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.AddMemberToChatMock.defaultExpectation != nil && afterAddMemberToChatCounter < 1 {
		if m.AddMemberToChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddMemberToChat at\n%s", m.AddMemberToChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.AddMemberToChat at\n%s with params: %#v", m.AddMemberToChatMock.defaultExpectation.expectationOrigins.origin, *m.AddMemberToChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAddMemberToChat != nil && afterAddMemberToChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.AddMemberToChat at\n%s", m.funcAddMemberToChatOrigin)
	}

	if !m.AddMemberToChatMock.invocationsDone() && afterAddMemberToChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.AddMemberToChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.AddMemberToChatMock.expectedInvocations), m.AddMemberToChatMock.expectedInvocationsOrigin, afterAddMemberToChatCounter)
	}
}

type mChatRepositoryMockCreateChat struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockCreateChatExpectation
	expectations       []*ChatRepositoryMockCreateChatExpectation

	callArgs []*ChatRepositoryMockCreateChatParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockCreateChatExpectation specifies expectation struct of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockCreateChatParams
	paramPtrs          *ChatRepositoryMockCreateChatParamPtrs
	expectationOrigins ChatRepositoryMockCreateChatExpectationOrigins
	results            *ChatRepositoryMockCreateChatResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockCreateChatParams contains parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParams struct {
	ctx  context.Context
	chat *models.Chat
}

// ChatRepositoryMockCreateChatParamPtrs contains pointers to parameters of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatParamPtrs struct {
	ctx  *context.Context
	chat **models.Chat
}

// ChatRepositoryMockCreateChatResults contains results of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockCreateChatOrigins contains origins of expectations of the ChatRepository.CreateChat
type ChatRepositoryMockCreateChatExpectationOrigins struct {
	origin     string
	originCtx  string
	originChat string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateChat *mChatRepositoryMockCreateChat) Optional() *mChatRepositoryMockCreateChat {
	mmCreateChat.optional = true
	return mmCreateChat
}

// Expect sets up expected params for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Expect(ctx context.Context, chat *models.Chat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.paramPtrs != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by ExpectParams functions")
	}

	mmCreateChat.defaultExpectation.params = &ChatRepositoryMockCreateChatParams{ctx, chat}
	mmCreateChat.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateChat.expectations {
		if minimock.Equal(e.params, mmCreateChat.defaultExpectation.params) {
			mmCreateChat.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateChat.defaultExpectation.params)
		}
	}

	return mmCreateChat
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreateChat.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreateChat
}

// ExpectChatParam2 sets up expected param chat for ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) ExpectChatParam2(chat *models.Chat) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{}
	}

	if mmCreateChat.defaultExpectation.params != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Expect")
	}

	if mmCreateChat.defaultExpectation.paramPtrs == nil {
		mmCreateChat.defaultExpectation.paramPtrs = &ChatRepositoryMockCreateChatParamPtrs{}
	}
	mmCreateChat.defaultExpectation.paramPtrs.chat = &chat
	mmCreateChat.defaultExpectation.expectationOrigins.originChat = minimock.CallerInfo(1)

	return mmCreateChat
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Inspect(f func(ctx context.Context, chat *models.Chat)) *mChatRepositoryMockCreateChat {
	if mmCreateChat.mock.inspectFuncCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.CreateChat")
	}

	mmCreateChat.mock.inspectFuncCreateChat = f

	return mmCreateChat
}

// Return sets up results that will be returned by ChatRepository.CreateChat
func (mmCreateChat *mChatRepositoryMockCreateChat) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	if mmCreateChat.defaultExpectation == nil {
		mmCreateChat.defaultExpectation = &ChatRepositoryMockCreateChatExpectation{mock: mmCreateChat.mock}
	}
	mmCreateChat.defaultExpectation.results = &ChatRepositoryMockCreateChatResults{i1, err}
	mmCreateChat.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// Set uses given function f to mock the ChatRepository.CreateChat method
func (mmCreateChat *mChatRepositoryMockCreateChat) Set(f func(ctx context.Context, chat *models.Chat) (i1 int64, err error)) *ChatRepositoryMock {
	if mmCreateChat.defaultExpectation != nil {
		mmCreateChat.mock.t.Fatalf("Default expectation is already set for the ChatRepository.CreateChat method")
	}

	if len(mmCreateChat.expectations) > 0 {
		mmCreateChat.mock.t.Fatalf("Some expectations are already set for the ChatRepository.CreateChat method")
	}

	mmCreateChat.mock.funcCreateChat = f
	mmCreateChat.mock.funcCreateChatOrigin = minimock.CallerInfo(1)
	return mmCreateChat.mock
}

// When sets expectation for the ChatRepository.CreateChat which will trigger the result defined by the following
// Then helper
func (mmCreateChat *mChatRepositoryMockCreateChat) When(ctx context.Context, chat *models.Chat) *ChatRepositoryMockCreateChatExpectation {
	if mmCreateChat.mock.funcCreateChat != nil {
		mmCreateChat.mock.t.Fatalf("ChatRepositoryMock.CreateChat mock is already set by Set")
	}

	expectation := &ChatRepositoryMockCreateChatExpectation{
		mock:               mmCreateChat.mock,
		params:             &ChatRepositoryMockCreateChatParams{ctx, chat},
		expectationOrigins: ChatRepositoryMockCreateChatExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateChat.expectations = append(mmCreateChat.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.CreateChat return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockCreateChatExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockCreateChatResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.CreateChat should be invoked
func (mmCreateChat *mChatRepositoryMockCreateChat) Times(n uint64) *mChatRepositoryMockCreateChat {
	if n == 0 {
		mmCreateChat.mock.t.Fatalf("Times of ChatRepositoryMock.CreateChat mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateChat.expectedInvocations, n)
	mmCreateChat.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateChat
}

func (mmCreateChat *mChatRepositoryMockCreateChat) invocationsDone() bool {
	if len(mmCreateChat.expectations) == 0 && mmCreateChat.defaultExpectation == nil && mmCreateChat.mock.funcCreateChat == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateChat.mock.afterCreateChatCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateChat.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateChat implements mm_repointerface.ChatRepository
func (mmCreateChat *ChatRepositoryMock) CreateChat(ctx context.Context, chat *models.Chat) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreateChat.beforeCreateChatCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateChat.afterCreateChatCounter, 1)

	mmCreateChat.t.Helper()

	if mmCreateChat.inspectFuncCreateChat != nil {
		mmCreateChat.inspectFuncCreateChat(ctx, chat)
	}

	mm_params := ChatRepositoryMockCreateChatParams{ctx, chat}

	// Record call args
	mmCreateChat.CreateChatMock.mutex.Lock()
	mmCreateChat.CreateChatMock.callArgs = append(mmCreateChat.CreateChatMock.callArgs, &mm_params)
	mmCreateChat.CreateChatMock.mutex.Unlock()

	for _, e := range mmCreateChat.CreateChatMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreateChat.CreateChatMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateChat.CreateChatMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateChat.CreateChatMock.defaultExpectation.params
		mm_want_ptrs := mmCreateChat.CreateChatMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockCreateChatParams{ctx, chat}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chat != nil && !minimock.Equal(*mm_want_ptrs.chat, mm_got.chat) {
				mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameter chat, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.originChat, *mm_want_ptrs.chat, mm_got.chat, minimock.Diff(*mm_want_ptrs.chat, mm_got.chat))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateChat.t.Errorf("ChatRepositoryMock.CreateChat got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateChat.CreateChatMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateChat.CreateChatMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateChat.t.Fatal("No results are set for the ChatRepositoryMock.CreateChat")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreateChat.funcCreateChat != nil {
		return mmCreateChat.funcCreateChat(ctx, chat)
	}
	mmCreateChat.t.Fatalf("Unexpected call to ChatRepositoryMock.CreateChat. %v %v", ctx, chat)
	return
}

// CreateChatAfterCounter returns a count of finished ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.afterCreateChatCounter)
}

// CreateChatBeforeCounter returns a count of ChatRepositoryMock.CreateChat invocations
func (mmCreateChat *ChatRepositoryMock) CreateChatBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateChat.beforeCreateChatCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.CreateChat.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateChat *mChatRepositoryMockCreateChat) Calls() []*ChatRepositoryMockCreateChatParams {
	mmCreateChat.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockCreateChatParams, len(mmCreateChat.callArgs))
	copy(argCopy, mmCreateChat.callArgs)

	mmCreateChat.mutex.RUnlock()

	return argCopy
}

// MinimockCreateChatDone returns true if the count of the CreateChat invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockCreateChatDone() bool {
	if m.CreateChatMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateChatMock.invocationsDone()
}

// MinimockCreateChatInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockCreateChatInspect() {
	for _, e := range m.CreateChatMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateChatCounter := mm_atomic.LoadUint64(&m.afterCreateChatCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateChatMock.defaultExpectation != nil && afterCreateChatCounter < 1 {
		if m.CreateChatMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.CreateChatMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s with params: %#v", m.CreateChatMock.defaultExpectation.expectationOrigins.origin, *m.CreateChatMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateChat != nil && afterCreateChatCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.CreateChat at\n%s", m.funcCreateChatOrigin)
	}

	if !m.CreateChatMock.invocationsDone() && afterCreateChatCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.CreateChat at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateChatMock.expectedInvocations), m.CreateChatMock.expectedInvocationsOrigin, afterCreateChatCounter)
	}
}

type mChatRepositoryMockGetChatById struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetChatByIdExpectation
	expectations       []*ChatRepositoryMockGetChatByIdExpectation

	callArgs []*ChatRepositoryMockGetChatByIdParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockGetChatByIdExpectation specifies expectation struct of the ChatRepository.GetChatById
type ChatRepositoryMockGetChatByIdExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockGetChatByIdParams
	paramPtrs          *ChatRepositoryMockGetChatByIdParamPtrs
	expectationOrigins ChatRepositoryMockGetChatByIdExpectationOrigins
	results            *ChatRepositoryMockGetChatByIdResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockGetChatByIdParams contains parameters of the ChatRepository.GetChatById
type ChatRepositoryMockGetChatByIdParams struct {
	ctx    context.Context
	chatId int64
}

// ChatRepositoryMockGetChatByIdParamPtrs contains pointers to parameters of the ChatRepository.GetChatById
type ChatRepositoryMockGetChatByIdParamPtrs struct {
	ctx    *context.Context
	chatId *int64
}

// ChatRepositoryMockGetChatByIdResults contains results of the ChatRepository.GetChatById
type ChatRepositoryMockGetChatByIdResults struct {
	cp1 *models.Chat
	err error
}

// ChatRepositoryMockGetChatByIdOrigins contains origins of expectations of the ChatRepository.GetChatById
type ChatRepositoryMockGetChatByIdExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetChatById *mChatRepositoryMockGetChatById) Optional() *mChatRepositoryMockGetChatById {
	mmGetChatById.optional = true
	return mmGetChatById
}

// Expect sets up expected params for ChatRepository.GetChatById
func (mmGetChatById *mChatRepositoryMockGetChatById) Expect(ctx context.Context, chatId int64) *mChatRepositoryMockGetChatById {
	if mmGetChatById.mock.funcGetChatById != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Set")
	}

	if mmGetChatById.defaultExpectation == nil {
		mmGetChatById.defaultExpectation = &ChatRepositoryMockGetChatByIdExpectation{}
	}

	if mmGetChatById.defaultExpectation.paramPtrs != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by ExpectParams functions")
	}

	mmGetChatById.defaultExpectation.params = &ChatRepositoryMockGetChatByIdParams{ctx, chatId}
	mmGetChatById.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetChatById.expectations {
		if minimock.Equal(e.params, mmGetChatById.defaultExpectation.params) {
			mmGetChatById.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatById.defaultExpectation.params)
		}
	}

	return mmGetChatById
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.GetChatById
func (mmGetChatById *mChatRepositoryMockGetChatById) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockGetChatById {
	if mmGetChatById.mock.funcGetChatById != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Set")
	}

	if mmGetChatById.defaultExpectation == nil {
		mmGetChatById.defaultExpectation = &ChatRepositoryMockGetChatByIdExpectation{}
	}

	if mmGetChatById.defaultExpectation.params != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Expect")
	}

	if mmGetChatById.defaultExpectation.paramPtrs == nil {
		mmGetChatById.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatByIdParamPtrs{}
	}
	mmGetChatById.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetChatById.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetChatById
}

// ExpectChatIdParam2 sets up expected param chatId for ChatRepository.GetChatById
func (mmGetChatById *mChatRepositoryMockGetChatById) ExpectChatIdParam2(chatId int64) *mChatRepositoryMockGetChatById {
	if mmGetChatById.mock.funcGetChatById != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Set")
	}

	if mmGetChatById.defaultExpectation == nil {
		mmGetChatById.defaultExpectation = &ChatRepositoryMockGetChatByIdExpectation{}
	}

	if mmGetChatById.defaultExpectation.params != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Expect")
	}

	if mmGetChatById.defaultExpectation.paramPtrs == nil {
		mmGetChatById.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatByIdParamPtrs{}
	}
	mmGetChatById.defaultExpectation.paramPtrs.chatId = &chatId
	mmGetChatById.defaultExpectation.expectationOrigins.originChatId = minimock.CallerInfo(1)

	return mmGetChatById
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetChatById
func (mmGetChatById *mChatRepositoryMockGetChatById) Inspect(f func(ctx context.Context, chatId int64)) *mChatRepositoryMockGetChatById {
	if mmGetChatById.mock.inspectFuncGetChatById != nil {
		mmGetChatById.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetChatById")
	}

	mmGetChatById.mock.inspectFuncGetChatById = f

	return mmGetChatById
}

// Return sets up results that will be returned by ChatRepository.GetChatById
func (mmGetChatById *mChatRepositoryMockGetChatById) Return(cp1 *models.Chat, err error) *ChatRepositoryMock {
	if mmGetChatById.mock.funcGetChatById != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Set")
	}

	if mmGetChatById.defaultExpectation == nil {
		mmGetChatById.defaultExpectation = &ChatRepositoryMockGetChatByIdExpectation{mock: mmGetChatById.mock}
	}
	mmGetChatById.defaultExpectation.results = &ChatRepositoryMockGetChatByIdResults{cp1, err}
	mmGetChatById.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetChatById.mock
}

// Set uses given function f to mock the ChatRepository.GetChatById method
func (mmGetChatById *mChatRepositoryMockGetChatById) Set(f func(ctx context.Context, chatId int64) (cp1 *models.Chat, err error)) *ChatRepositoryMock {
	if mmGetChatById.defaultExpectation != nil {
		mmGetChatById.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetChatById method")
	}

	if len(mmGetChatById.expectations) > 0 {
		mmGetChatById.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetChatById method")
	}

	mmGetChatById.mock.funcGetChatById = f
	mmGetChatById.mock.funcGetChatByIdOrigin = minimock.CallerInfo(1)
	return mmGetChatById.mock
}

// When sets expectation for the ChatRepository.GetChatById which will trigger the result defined by the following
// Then helper
func (mmGetChatById *mChatRepositoryMockGetChatById) When(ctx context.Context, chatId int64) *ChatRepositoryMockGetChatByIdExpectation {
	if mmGetChatById.mock.funcGetChatById != nil {
		mmGetChatById.mock.t.Fatalf("ChatRepositoryMock.GetChatById mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetChatByIdExpectation{
		mock:               mmGetChatById.mock,
		params:             &ChatRepositoryMockGetChatByIdParams{ctx, chatId},
		expectationOrigins: ChatRepositoryMockGetChatByIdExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetChatById.expectations = append(mmGetChatById.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetChatById return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetChatByIdExpectation) Then(cp1 *models.Chat, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetChatByIdResults{cp1, err}
	return e.mock
}

// Times sets number of times ChatRepository.GetChatById should be invoked
func (mmGetChatById *mChatRepositoryMockGetChatById) Times(n uint64) *mChatRepositoryMockGetChatById {
	if n == 0 {
		mmGetChatById.mock.t.Fatalf("Times of ChatRepositoryMock.GetChatById mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetChatById.expectedInvocations, n)
	mmGetChatById.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetChatById
}

func (mmGetChatById *mChatRepositoryMockGetChatById) invocationsDone() bool {
	if len(mmGetChatById.expectations) == 0 && mmGetChatById.defaultExpectation == nil && mmGetChatById.mock.funcGetChatById == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetChatById.mock.afterGetChatByIdCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetChatById.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetChatById implements mm_repointerface.ChatRepository
func (mmGetChatById *ChatRepositoryMock) GetChatById(ctx context.Context, chatId int64) (cp1 *models.Chat, err error) {
	mm_atomic.AddUint64(&mmGetChatById.beforeGetChatByIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatById.afterGetChatByIdCounter, 1)

	mmGetChatById.t.Helper()

	if mmGetChatById.inspectFuncGetChatById != nil {
		mmGetChatById.inspectFuncGetChatById(ctx, chatId)
	}

	mm_params := ChatRepositoryMockGetChatByIdParams{ctx, chatId}

	// Record call args
	mmGetChatById.GetChatByIdMock.mutex.Lock()
	mmGetChatById.GetChatByIdMock.callArgs = append(mmGetChatById.GetChatByIdMock.callArgs, &mm_params)
	mmGetChatById.GetChatByIdMock.mutex.Unlock()

	for _, e := range mmGetChatById.GetChatByIdMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetChatById.GetChatByIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatById.GetChatByIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatById.GetChatByIdMock.defaultExpectation.params
		mm_want_ptrs := mmGetChatById.GetChatByIdMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockGetChatByIdParams{ctx, chatId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetChatById.t.Errorf("ChatRepositoryMock.GetChatById got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatById.GetChatByIdMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatId != nil && !minimock.Equal(*mm_want_ptrs.chatId, mm_got.chatId) {
				mmGetChatById.t.Errorf("ChatRepositoryMock.GetChatById got unexpected parameter chatId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatById.GetChatByIdMock.defaultExpectation.expectationOrigins.originChatId, *mm_want_ptrs.chatId, mm_got.chatId, minimock.Diff(*mm_want_ptrs.chatId, mm_got.chatId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatById.t.Errorf("ChatRepositoryMock.GetChatById got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetChatById.GetChatByIdMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatById.GetChatByIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatById.t.Fatal("No results are set for the ChatRepositoryMock.GetChatById")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetChatById.funcGetChatById != nil {
		return mmGetChatById.funcGetChatById(ctx, chatId)
	}
	mmGetChatById.t.Fatalf("Unexpected call to ChatRepositoryMock.GetChatById. %v %v", ctx, chatId)
	return
}

// GetChatByIdAfterCounter returns a count of finished ChatRepositoryMock.GetChatById invocations
func (mmGetChatById *ChatRepositoryMock) GetChatByIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatById.afterGetChatByIdCounter)
}

// GetChatByIdBeforeCounter returns a count of ChatRepositoryMock.GetChatById invocations
func (mmGetChatById *ChatRepositoryMock) GetChatByIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatById.beforeGetChatByIdCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetChatById.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatById *mChatRepositoryMockGetChatById) Calls() []*ChatRepositoryMockGetChatByIdParams {
	mmGetChatById.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetChatByIdParams, len(mmGetChatById.callArgs))
	copy(argCopy, mmGetChatById.callArgs)

	mmGetChatById.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatByIdDone returns true if the count of the GetChatById invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetChatByIdDone() bool {
	if m.GetChatByIdMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetChatByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetChatByIdMock.invocationsDone()
}

// MinimockGetChatByIdInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetChatByIdInspect() {
	for _, e := range m.GetChatByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatById at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetChatByIdCounter := mm_atomic.LoadUint64(&m.afterGetChatByIdCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatByIdMock.defaultExpectation != nil && afterGetChatByIdCounter < 1 {
		if m.GetChatByIdMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatById at\n%s", m.GetChatByIdMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatById at\n%s with params: %#v", m.GetChatByIdMock.defaultExpectation.expectationOrigins.origin, *m.GetChatByIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatById != nil && afterGetChatByIdCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.GetChatById at\n%s", m.funcGetChatByIdOrigin)
	}

	if !m.GetChatByIdMock.invocationsDone() && afterGetChatByIdCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.GetChatById at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetChatByIdMock.expectedInvocations), m.GetChatByIdMock.expectedInvocationsOrigin, afterGetChatByIdCounter)
	}
}

type mChatRepositoryMockGetChatMessages struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockGetChatMessagesExpectation
	expectations       []*ChatRepositoryMockGetChatMessagesExpectation

	callArgs []*ChatRepositoryMockGetChatMessagesParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockGetChatMessagesExpectation specifies expectation struct of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockGetChatMessagesParams
	paramPtrs          *ChatRepositoryMockGetChatMessagesParamPtrs
	expectationOrigins ChatRepositoryMockGetChatMessagesExpectationOrigins
	results            *ChatRepositoryMockGetChatMessagesResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockGetChatMessagesParams contains parameters of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesParams struct {
	ctx    context.Context
	chatId int64
}

// ChatRepositoryMockGetChatMessagesParamPtrs contains pointers to parameters of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesParamPtrs struct {
	ctx    *context.Context
	chatId *int64
}

// ChatRepositoryMockGetChatMessagesResults contains results of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesResults struct {
	mpa1 []*models.Message
	err  error
}

// ChatRepositoryMockGetChatMessagesOrigins contains origins of expectations of the ChatRepository.GetChatMessages
type ChatRepositoryMockGetChatMessagesExpectationOrigins struct {
	origin       string
	originCtx    string
	originChatId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Optional() *mChatRepositoryMockGetChatMessages {
	mmGetChatMessages.optional = true
	return mmGetChatMessages
}

// Expect sets up expected params for ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Expect(ctx context.Context, chatId int64) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{}
	}

	if mmGetChatMessages.defaultExpectation.paramPtrs != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by ExpectParams functions")
	}

	mmGetChatMessages.defaultExpectation.params = &ChatRepositoryMockGetChatMessagesParams{ctx, chatId}
	mmGetChatMessages.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetChatMessages.expectations {
		if minimock.Equal(e.params, mmGetChatMessages.defaultExpectation.params) {
			mmGetChatMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetChatMessages.defaultExpectation.params)
		}
	}

	return mmGetChatMessages
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{}
	}

	if mmGetChatMessages.defaultExpectation.params != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Expect")
	}

	if mmGetChatMessages.defaultExpectation.paramPtrs == nil {
		mmGetChatMessages.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatMessagesParamPtrs{}
	}
	mmGetChatMessages.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetChatMessages.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetChatMessages
}

// ExpectChatIdParam2 sets up expected param chatId for ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) ExpectChatIdParam2(chatId int64) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{}
	}

	if mmGetChatMessages.defaultExpectation.params != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Expect")
	}

	if mmGetChatMessages.defaultExpectation.paramPtrs == nil {
		mmGetChatMessages.defaultExpectation.paramPtrs = &ChatRepositoryMockGetChatMessagesParamPtrs{}
	}
	mmGetChatMessages.defaultExpectation.paramPtrs.chatId = &chatId
	mmGetChatMessages.defaultExpectation.expectationOrigins.originChatId = minimock.CallerInfo(1)

	return mmGetChatMessages
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Inspect(f func(ctx context.Context, chatId int64)) *mChatRepositoryMockGetChatMessages {
	if mmGetChatMessages.mock.inspectFuncGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.GetChatMessages")
	}

	mmGetChatMessages.mock.inspectFuncGetChatMessages = f

	return mmGetChatMessages
}

// Return sets up results that will be returned by ChatRepository.GetChatMessages
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Return(mpa1 []*models.Message, err error) *ChatRepositoryMock {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	if mmGetChatMessages.defaultExpectation == nil {
		mmGetChatMessages.defaultExpectation = &ChatRepositoryMockGetChatMessagesExpectation{mock: mmGetChatMessages.mock}
	}
	mmGetChatMessages.defaultExpectation.results = &ChatRepositoryMockGetChatMessagesResults{mpa1, err}
	mmGetChatMessages.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetChatMessages.mock
}

// Set uses given function f to mock the ChatRepository.GetChatMessages method
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Set(f func(ctx context.Context, chatId int64) (mpa1 []*models.Message, err error)) *ChatRepositoryMock {
	if mmGetChatMessages.defaultExpectation != nil {
		mmGetChatMessages.mock.t.Fatalf("Default expectation is already set for the ChatRepository.GetChatMessages method")
	}

	if len(mmGetChatMessages.expectations) > 0 {
		mmGetChatMessages.mock.t.Fatalf("Some expectations are already set for the ChatRepository.GetChatMessages method")
	}

	mmGetChatMessages.mock.funcGetChatMessages = f
	mmGetChatMessages.mock.funcGetChatMessagesOrigin = minimock.CallerInfo(1)
	return mmGetChatMessages.mock
}

// When sets expectation for the ChatRepository.GetChatMessages which will trigger the result defined by the following
// Then helper
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) When(ctx context.Context, chatId int64) *ChatRepositoryMockGetChatMessagesExpectation {
	if mmGetChatMessages.mock.funcGetChatMessages != nil {
		mmGetChatMessages.mock.t.Fatalf("ChatRepositoryMock.GetChatMessages mock is already set by Set")
	}

	expectation := &ChatRepositoryMockGetChatMessagesExpectation{
		mock:               mmGetChatMessages.mock,
		params:             &ChatRepositoryMockGetChatMessagesParams{ctx, chatId},
		expectationOrigins: ChatRepositoryMockGetChatMessagesExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetChatMessages.expectations = append(mmGetChatMessages.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.GetChatMessages return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockGetChatMessagesExpectation) Then(mpa1 []*models.Message, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockGetChatMessagesResults{mpa1, err}
	return e.mock
}

// Times sets number of times ChatRepository.GetChatMessages should be invoked
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Times(n uint64) *mChatRepositoryMockGetChatMessages {
	if n == 0 {
		mmGetChatMessages.mock.t.Fatalf("Times of ChatRepositoryMock.GetChatMessages mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetChatMessages.expectedInvocations, n)
	mmGetChatMessages.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetChatMessages
}

func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) invocationsDone() bool {
	if len(mmGetChatMessages.expectations) == 0 && mmGetChatMessages.defaultExpectation == nil && mmGetChatMessages.mock.funcGetChatMessages == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetChatMessages.mock.afterGetChatMessagesCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetChatMessages.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetChatMessages implements mm_repointerface.ChatRepository
func (mmGetChatMessages *ChatRepositoryMock) GetChatMessages(ctx context.Context, chatId int64) (mpa1 []*models.Message, err error) {
	mm_atomic.AddUint64(&mmGetChatMessages.beforeGetChatMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetChatMessages.afterGetChatMessagesCounter, 1)

	mmGetChatMessages.t.Helper()

	if mmGetChatMessages.inspectFuncGetChatMessages != nil {
		mmGetChatMessages.inspectFuncGetChatMessages(ctx, chatId)
	}

	mm_params := ChatRepositoryMockGetChatMessagesParams{ctx, chatId}

	// Record call args
	mmGetChatMessages.GetChatMessagesMock.mutex.Lock()
	mmGetChatMessages.GetChatMessagesMock.callArgs = append(mmGetChatMessages.GetChatMessagesMock.callArgs, &mm_params)
	mmGetChatMessages.GetChatMessagesMock.mutex.Unlock()

	for _, e := range mmGetChatMessages.GetChatMessagesMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mpa1, e.results.err
		}
	}

	if mmGetChatMessages.GetChatMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetChatMessages.GetChatMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetChatMessages.GetChatMessagesMock.defaultExpectation.params
		mm_want_ptrs := mmGetChatMessages.GetChatMessagesMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockGetChatMessagesParams{ctx, chatId}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetChatMessages.t.Errorf("ChatRepositoryMock.GetChatMessages got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatMessages.GetChatMessagesMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.chatId != nil && !minimock.Equal(*mm_want_ptrs.chatId, mm_got.chatId) {
				mmGetChatMessages.t.Errorf("ChatRepositoryMock.GetChatMessages got unexpected parameter chatId, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetChatMessages.GetChatMessagesMock.defaultExpectation.expectationOrigins.originChatId, *mm_want_ptrs.chatId, mm_got.chatId, minimock.Diff(*mm_want_ptrs.chatId, mm_got.chatId))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetChatMessages.t.Errorf("ChatRepositoryMock.GetChatMessages got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetChatMessages.GetChatMessagesMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetChatMessages.GetChatMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetChatMessages.t.Fatal("No results are set for the ChatRepositoryMock.GetChatMessages")
		}
		return (*mm_results).mpa1, (*mm_results).err
	}
	if mmGetChatMessages.funcGetChatMessages != nil {
		return mmGetChatMessages.funcGetChatMessages(ctx, chatId)
	}
	mmGetChatMessages.t.Fatalf("Unexpected call to ChatRepositoryMock.GetChatMessages. %v %v", ctx, chatId)
	return
}

// GetChatMessagesAfterCounter returns a count of finished ChatRepositoryMock.GetChatMessages invocations
func (mmGetChatMessages *ChatRepositoryMock) GetChatMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatMessages.afterGetChatMessagesCounter)
}

// GetChatMessagesBeforeCounter returns a count of ChatRepositoryMock.GetChatMessages invocations
func (mmGetChatMessages *ChatRepositoryMock) GetChatMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetChatMessages.beforeGetChatMessagesCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.GetChatMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetChatMessages *mChatRepositoryMockGetChatMessages) Calls() []*ChatRepositoryMockGetChatMessagesParams {
	mmGetChatMessages.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockGetChatMessagesParams, len(mmGetChatMessages.callArgs))
	copy(argCopy, mmGetChatMessages.callArgs)

	mmGetChatMessages.mutex.RUnlock()

	return argCopy
}

// MinimockGetChatMessagesDone returns true if the count of the GetChatMessages invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockGetChatMessagesDone() bool {
	if m.GetChatMessagesMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetChatMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetChatMessagesMock.invocationsDone()
}

// MinimockGetChatMessagesInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockGetChatMessagesInspect() {
	for _, e := range m.GetChatMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetChatMessagesCounter := mm_atomic.LoadUint64(&m.afterGetChatMessagesCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetChatMessagesMock.defaultExpectation != nil && afterGetChatMessagesCounter < 1 {
		if m.GetChatMessagesMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s", m.GetChatMessagesMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s with params: %#v", m.GetChatMessagesMock.defaultExpectation.expectationOrigins.origin, *m.GetChatMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetChatMessages != nil && afterGetChatMessagesCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.GetChatMessages at\n%s", m.funcGetChatMessagesOrigin)
	}

	if !m.GetChatMessagesMock.invocationsDone() && afterGetChatMessagesCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.GetChatMessages at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetChatMessagesMock.expectedInvocations), m.GetChatMessagesMock.expectedInvocationsOrigin, afterGetChatMessagesCounter)
	}
}

type mChatRepositoryMockSendMessage struct {
	optional           bool
	mock               *ChatRepositoryMock
	defaultExpectation *ChatRepositoryMockSendMessageExpectation
	expectations       []*ChatRepositoryMockSendMessageExpectation

	callArgs []*ChatRepositoryMockSendMessageParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ChatRepositoryMockSendMessageExpectation specifies expectation struct of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectation struct {
	mock               *ChatRepositoryMock
	params             *ChatRepositoryMockSendMessageParams
	paramPtrs          *ChatRepositoryMockSendMessageParamPtrs
	expectationOrigins ChatRepositoryMockSendMessageExpectationOrigins
	results            *ChatRepositoryMockSendMessageResults
	returnOrigin       string
	Counter            uint64
}

// ChatRepositoryMockSendMessageParams contains parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParams struct {
	ctx     context.Context
	message *models.Message
}

// ChatRepositoryMockSendMessageParamPtrs contains pointers to parameters of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageParamPtrs struct {
	ctx     *context.Context
	message **models.Message
}

// ChatRepositoryMockSendMessageResults contains results of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageResults struct {
	i1  int64
	err error
}

// ChatRepositoryMockSendMessageOrigins contains origins of expectations of the ChatRepository.SendMessage
type ChatRepositoryMockSendMessageExpectationOrigins struct {
	origin        string
	originCtx     string
	originMessage string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSendMessage *mChatRepositoryMockSendMessage) Optional() *mChatRepositoryMockSendMessage {
	mmSendMessage.optional = true
	return mmSendMessage
}

// Expect sets up expected params for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Expect(ctx context.Context, message *models.Message) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.paramPtrs != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by ExpectParams functions")
	}

	mmSendMessage.defaultExpectation.params = &ChatRepositoryMockSendMessageParams{ctx, message}
	mmSendMessage.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// ExpectCtxParam1 sets up expected param ctx for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectCtxParam1(ctx context.Context) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.ctx = &ctx
	mmSendMessage.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSendMessage
}

// ExpectMessageParam2 sets up expected param message for ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) ExpectMessageParam2(message *models.Message) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{}
	}

	if mmSendMessage.defaultExpectation.params != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Expect")
	}

	if mmSendMessage.defaultExpectation.paramPtrs == nil {
		mmSendMessage.defaultExpectation.paramPtrs = &ChatRepositoryMockSendMessageParamPtrs{}
	}
	mmSendMessage.defaultExpectation.paramPtrs.message = &message
	mmSendMessage.defaultExpectation.expectationOrigins.originMessage = minimock.CallerInfo(1)

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Inspect(f func(ctx context.Context, message *models.Message)) *mChatRepositoryMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for ChatRepositoryMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by ChatRepository.SendMessage
func (mmSendMessage *mChatRepositoryMockSendMessage) Return(i1 int64, err error) *ChatRepositoryMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &ChatRepositoryMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &ChatRepositoryMockSendMessageResults{i1, err}
	mmSendMessage.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// Set uses given function f to mock the ChatRepository.SendMessage method
func (mmSendMessage *mChatRepositoryMockSendMessage) Set(f func(ctx context.Context, message *models.Message) (i1 int64, err error)) *ChatRepositoryMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the ChatRepository.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the ChatRepository.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	mmSendMessage.mock.funcSendMessageOrigin = minimock.CallerInfo(1)
	return mmSendMessage.mock
}

// When sets expectation for the ChatRepository.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mChatRepositoryMockSendMessage) When(ctx context.Context, message *models.Message) *ChatRepositoryMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("ChatRepositoryMock.SendMessage mock is already set by Set")
	}

	expectation := &ChatRepositoryMockSendMessageExpectation{
		mock:               mmSendMessage.mock,
		params:             &ChatRepositoryMockSendMessageParams{ctx, message},
		expectationOrigins: ChatRepositoryMockSendMessageExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up ChatRepository.SendMessage return parameters for the expectation previously defined by the When method
func (e *ChatRepositoryMockSendMessageExpectation) Then(i1 int64, err error) *ChatRepositoryMock {
	e.results = &ChatRepositoryMockSendMessageResults{i1, err}
	return e.mock
}

// Times sets number of times ChatRepository.SendMessage should be invoked
func (mmSendMessage *mChatRepositoryMockSendMessage) Times(n uint64) *mChatRepositoryMockSendMessage {
	if n == 0 {
		mmSendMessage.mock.t.Fatalf("Times of ChatRepositoryMock.SendMessage mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSendMessage.expectedInvocations, n)
	mmSendMessage.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSendMessage
}

func (mmSendMessage *mChatRepositoryMockSendMessage) invocationsDone() bool {
	if len(mmSendMessage.expectations) == 0 && mmSendMessage.defaultExpectation == nil && mmSendMessage.mock.funcSendMessage == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSendMessage.mock.afterSendMessageCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSendMessage.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// SendMessage implements mm_repointerface.ChatRepository
func (mmSendMessage *ChatRepositoryMock) SendMessage(ctx context.Context, message *models.Message) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	mmSendMessage.t.Helper()

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, message)
	}

	mm_params := ChatRepositoryMockSendMessageParams{ctx, message}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, &mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_want_ptrs := mmSendMessage.SendMessageMock.defaultExpectation.paramPtrs

		mm_got := ChatRepositoryMockSendMessageParams{ctx, message}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.message != nil && !minimock.Equal(*mm_want_ptrs.message, mm_got.message) {
				mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameter message, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.originMessage, *mm_want_ptrs.message, mm_got.message, minimock.Diff(*mm_want_ptrs.message, mm_got.message))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("ChatRepositoryMock.SendMessage got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSendMessage.SendMessageMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the ChatRepositoryMock.SendMessage")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, message)
	}
	mmSendMessage.t.Fatalf("Unexpected call to ChatRepositoryMock.SendMessage. %v %v", ctx, message)
	return
}

// SendMessageAfterCounter returns a count of finished ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of ChatRepositoryMock.SendMessage invocations
func (mmSendMessage *ChatRepositoryMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to ChatRepositoryMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mChatRepositoryMockSendMessage) Calls() []*ChatRepositoryMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*ChatRepositoryMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *ChatRepositoryMock) MinimockSendMessageDone() bool {
	if m.SendMessageMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SendMessageMock.invocationsDone()
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *ChatRepositoryMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSendMessageCounter := mm_atomic.LoadUint64(&m.afterSendMessageCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && afterSendMessageCounter < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.SendMessageMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s with params: %#v", m.SendMessageMock.defaultExpectation.expectationOrigins.origin, *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && afterSendMessageCounter < 1 {
		m.t.Errorf("Expected call to ChatRepositoryMock.SendMessage at\n%s", m.funcSendMessageOrigin)
	}

	if !m.SendMessageMock.invocationsDone() && afterSendMessageCounter > 0 {
		m.t.Errorf("Expected %d calls to ChatRepositoryMock.SendMessage at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SendMessageMock.expectedInvocations), m.SendMessageMock.expectedInvocationsOrigin, afterSendMessageCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ChatRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockAddMemberToChatInspect()

			m.MinimockCreateChatInspect()

			m.MinimockGetChatByIdInspect()

			m.MinimockGetChatMessagesInspect()

			m.MinimockSendMessageInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ChatRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ChatRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddMemberToChatDone() &&
		m.MinimockCreateChatDone() &&
		m.MinimockGetChatByIdDone() &&
		m.MinimockGetChatMessagesDone() &&
		m.MinimockSendMessageDone()
}
